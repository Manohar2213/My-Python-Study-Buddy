Python Loops

Loops are used to execute a block of code repeatedly. Python has two main types of loops: for loops and while loops.

For Loops:
A for loop is used to iterate over a sequence (like a list, tuple, string, or range).

Basic syntax:
for variable in sequence:
    # code block to execute

Examples:

1. Looping through a list:
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)

Output:
apple
banana
cherry

2. Looping through a string:
for letter in "Python":
    print(letter)

Output:
P
y
t
h
o
n

3. Using range() function:
for i in range(5):
    print(i)

Output: 0, 1, 2, 3, 4

4. Range with start and stop:
for i in range(2, 7):
    print(i)

Output: 2, 3, 4, 5, 6

5. Range with step:
for i in range(0, 10, 2):
    print(i)

Output: 0, 2, 4, 6, 8

While Loops:
A while loop executes a block of code as long as a condition is true.

Basic syntax:
while condition:
    # code block to execute

Examples:

1. Basic while loop:
count = 0
while count < 5:
    print(count)
    count += 1

Output: 0, 1, 2, 3, 4

2. While loop with user input:
user_input = ""
while user_input != "quit":
    user_input = input("Enter 'quit' to exit: ")
    print(f"You entered: {user_input}")

Loop Control Statements:

1. break statement:
Terminates the loop completely.

for i in range(10):
    if i == 5:
        break
    print(i)

Output: 0, 1, 2, 3, 4

2. continue statement:
Skips the current iteration and continues with the next.

for i in range(10):
    if i % 2 == 0:
        continue
    print(i)

Output: 1, 3, 5, 7, 9

3. pass statement:
Does nothing, used as a placeholder.

for i in range(5):
    if i == 2:
        pass  # placeholder for future code
    else:
        print(i)

Nested Loops:
You can have loops inside other loops.

for i in range(3):
    for j in range(2):
        print(f"i={i}, j={j}")

Output:
i=0, j=0
i=0, j=1
i=1, j=0
i=1, j=1
i=2, j=0
i=2, j=1

Loop with else:
Python loops can have an else clause that executes when the loop completes normally (not via break).

for i in range(5):
    print(i)
else:
    print("Loop completed successfully")

Looping through dictionaries:

person = {"name": "Alice", "age": 30, "city": "New York"}

# Loop through keys
for key in person:
    print(key)

# Loop through values
for value in person.values():
    print(value)

# Loop through key-value pairs
for key, value in person.items():
    print(f"{key}: {value}")

Common Loop Patterns:

1. Enumerate (getting index and value):
fruits = ["apple", "banana", "cherry"]
for index, fruit in enumerate(fruits):
    print(f"{index}: {fruit}")

2. Zip (looping through multiple lists):
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
for name, age in zip(names, ages):
    print(f"{name} is {age} years old")

3. List comprehension (creating lists with loops):
squares = [x**2 for x in range(10)]
even_squares = [x**2 for x in range(10) if x % 2 == 0]

Loop Best Practices:
1. Use for loops when you know how many times to iterate
2. Use while loops when the number of iterations depends on a condition
3. Avoid infinite loops by ensuring the condition will eventually become false
4. Use meaningful variable names in loops
5. Consider using list comprehensions for simple loops that create lists
6. Be careful with modifying lists while iterating over them

Infinite Loop Example (to avoid):
# This creates an infinite loop - avoid this!
while True:
    print("This will run forever")
    # Need a break statement or condition change to exit

Common Loop Errors:
1. Off-by-one errors with range()
2. Forgetting to increment counter in while loops
3. Modifying a list while iterating over it
4. Creating infinite loops without exit conditions